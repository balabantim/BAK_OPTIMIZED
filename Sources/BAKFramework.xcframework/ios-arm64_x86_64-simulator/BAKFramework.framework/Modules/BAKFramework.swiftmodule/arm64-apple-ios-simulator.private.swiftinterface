// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BAKFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import AdSupport
import AppTrackingTransparency
import AppsFlyerLib
import Combine
import CoreImage
import CoreMotion
import FBSDKCoreKit
import FacebookCore
//
import Foundation
import OneSignal
import Photos
import SBPAsyncImage
import Swift
import SwiftUI
import SwiftUITooltip
import SystemConfiguration
import TikTokOpenSDK
import UIKit.UIImage
import UIKit
import UIKit.UIScreen
import UniformTypeIdentifiers
import _AVKit_SwiftUI
import _Concurrency
import _PhotosUI_SwiftUI
import _StringProcessing
//
@_inheritsConvenienceInitializers @objc(BAKService) final public class BAKService : ObjectiveC.NSObject, AppsFlyerLibDelegate {
  public enum FirstRunMode {
    case empty
    case importByQR(Swift.String, Swift.String)
    case leaderBoard(_: Swift.String = "", _: (() -> Swift.Void)? = nil)
  }
  final public var configuraionSource: BAKFramework.BAKService.LAConfiguration!
  final public var additionalKeys: [Swift.String : Swift.String]
  @objc public static var shared: BAKFramework.BAKService
  final public func showInitializationView(window: inout UIKit.UIWindow?)
  @objc final public func setupUnityAnalytics(argc: Swift.Int32, argv: Swift.UnsafeMutablePointer<Swift.UnsafeMutablePointer<Swift.CChar>?>, appOrientation: UIKit.UIInterfaceOrientationMask = .all, main: @escaping (() -> Swift.Void))
  final public func setupAnalytics(appOrientation: UIKit.UIInterfaceOrientationMask = .all, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?, window: inout UIKit.UIWindow?, main: (() -> Swift.Void)? = nil, back: (() -> Swift.Void)? = nil)
  final public func setupUIAnalytics(appOrientation: UIKit.UIInterfaceOrientationMask = .all, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?, window: inout UIKit.UIWindow?, main: (() -> (SwiftUI.View)?)? = nil, back: (() -> Swift.Void)? = nil)
  public static var orientationLock: UIKit.UIInterfaceOrientationMask {
    get
    set
  }
  public struct LAConfiguration : Swift.Codable {
    public let appleAppID: Swift.String
    public let appsFlyer: Swift.String
    public let oneSignal: Swift.String
    public let tikTok: Swift.String
    public let facebookid: Swift.String
    public let facebookkey: Swift.String
    public let email: Swift.String?
    public let leaderboard: Swift.Bool
    public let privacyUrl: Swift.String?
    public let blockOrganic: Swift.Bool?
    public let termUrl: Swift.String?
    public let back: Swift.Bool?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  @objc override dynamic public init()
  @objc deinit
}
extension BAKFramework.BAKService {
  @objc final public func onConversionDataSuccess(_ conversionInfo: [Swift.AnyHashable : Any])
  @objc final public func onConversionDataFail(_ error: Swift.Error)
  @objc final public func onAppOpenAttribution(_ attributionData: [Swift.AnyHashable : Any])
  @objc final public func onAppOpenAttributionFailure(_ error: Swift.Error)
}
extension SwiftUI.EnvironmentValues {
  public var mediaPickerTheme: BAKFramework.MediaPickerTheme {
    get
    set
  }
}
extension SwiftUI.View {
  public func mediaPickerTheme(_ theme: BAKFramework.MediaPickerTheme) -> some SwiftUI.View
  
  public func mediaPickerTheme(main: BAKFramework.MediaPickerTheme.Main = .init(), selection: BAKFramework.MediaPickerTheme.Selection = .init(), error: BAKFramework.MediaPickerTheme.Error = .init()) -> some SwiftUI.View
  
}
public struct MediaPickerTheme {
  public let main: BAKFramework.MediaPickerTheme.Main
  public let selection: BAKFramework.MediaPickerTheme.Selection
  public let error: BAKFramework.MediaPickerTheme.Error
  public init(main: BAKFramework.MediaPickerTheme.Main = .init(), selection: BAKFramework.MediaPickerTheme.Selection = .init(), error: BAKFramework.MediaPickerTheme.Error = .init())
}
extension BAKFramework.MediaPickerTheme {
  public struct Main {
    public let text: SwiftUI.Color
    public let albumSelectionBackground: SwiftUI.Color
    public let fullscreenPhotoBackground: SwiftUI.Color
    public let cameraBackground: SwiftUI.Color
    public let cameraSelectionBackground: SwiftUI.Color
    public init(text: SwiftUI.Color = Color(UIColor.label), albumSelectionBackground: SwiftUI.Color = Color(UIColor.systemGroupedBackground), fullscreenPhotoBackground: SwiftUI.Color = Color(UIColor.systemGroupedBackground), cameraBackground: SwiftUI.Color = .black, cameraSelectionBackground: SwiftUI.Color = .black)
  }
  public struct Selection {
    public let emptyTint: SwiftUI.Color
    public let emptyBackground: SwiftUI.Color
    public let selectedTint: SwiftUI.Color
    public let selectedBackground: SwiftUI.Color
    public let fullscreenTint: SwiftUI.Color
    public init(emptyTint: SwiftUI.Color = .white, emptyBackground: SwiftUI.Color = .clear, selectedTint: SwiftUI.Color = .blue, selectedBackground: SwiftUI.Color = .white, fullscreenTint: SwiftUI.Color = .blue)
  }
  public struct Error {
    public let background: SwiftUI.Color
    public let tint: SwiftUI.Color
    public init(background: SwiftUI.Color = .red.opacity(0.7), tint: SwiftUI.Color = .white)
  }
}
@_Concurrency.MainActor(unsafe) public struct LeaderBoard_Previews : SwiftUI.PreviewProvider {
  @_Concurrency.MainActor(unsafe) public static var previews: some SwiftUI.View {
    get
  }
  public typealias Previews = @_opaqueReturnTypeOf("$s12BAKFramework20LeaderBoard_PreviewsV8previewsQrvpZ", 0) __
}
public enum MediaSelectionStyle {
  case checkmark
  case count
  public static func == (a: BAKFramework.MediaSelectionStyle, b: BAKFramework.MediaSelectionStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MediaSelectionType {
  case photoAndVideo
  case photo
  case video
  public static func == (a: BAKFramework.MediaSelectionType, b: BAKFramework.MediaSelectionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PVC : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) public func showSwiftUI(view: some View)
  @_Concurrency.MainActor(unsafe) public func hideSwiftUI()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum MediaType {
  case image
  case video
  public static func == (a: BAKFramework.MediaType, b: BAKFramework.MediaType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Media : Swift.Identifiable, Swift.Equatable {
  public var id: Foundation.UUID
  public static func == (lhs: BAKFramework.Media, rhs: BAKFramework.Media) -> Swift.Bool
  public typealias ID = Foundation.UUID
}
extension BAKFramework.Media {
  public var type: BAKFramework.MediaType {
    get
  }
  public var duration: CoreFoundation.CGFloat? {
    get
  }
  #if compiler(>=5.3) && $AsyncAwait
  public func getURL() async -> Foundation.URL?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getThumbnailURL() async -> Foundation.URL?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getData() async -> Foundation.Data?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func getThumbnailData() async -> Foundation.Data?
  #endif
}
@_hasMissingDesignatedInitializers public class Reachability {
  @objc deinit
}
@_Concurrency.MainActor(unsafe) public struct MediaPicker<AlbumSelectionContent, CameraSelectionContent> : SwiftUI.View where AlbumSelectionContent : SwiftUI.View, CameraSelectionContent : SwiftUI.View {
  public typealias AlbumSelectionClosure = ((BAKFramework.ModeSwitcher, BAKFramework.AlbumSelectionView, Swift.Bool) -> AlbumSelectionContent)
  public typealias CameraSelectionClosure = ((@escaping BAKFramework.SimpleClosure, @escaping BAKFramework.SimpleClosure, BAKFramework.CameraSelectionView) -> CameraSelectionContent)
  #if compiler(>=5.3) && $AsyncAwait
  public typealias FilterClosure = (BAKFramework.Media) async -> BAKFramework.Media?
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public typealias MassFilterClosure = ([BAKFramework.Media]) async -> [BAKFramework.Media]
  #endif
  @_Concurrency.MainActor(unsafe) public init(isPresented: SwiftUI.Binding<Swift.Bool>, onChange: @escaping BAKFramework.MediaPickerCompletionClosure, albumSelectionBuilder: @escaping BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>.AlbumSelectionClosure, cameraSelectionBuilder: @escaping BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>.CameraSelectionClosure)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12BAKFramework11MediaPickerV4bodyQrvp", 0) __<AlbumSelectionContent, CameraSelectionContent>
}
extension BAKFramework.MediaPicker {
  @_Concurrency.MainActor(unsafe) public func showLiveCameraCell(_ show: Swift.Bool = true) -> BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>
  @_Concurrency.MainActor(unsafe) public func mediaSelectionType(_ type: BAKFramework.MediaSelectionType) -> BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>
  @_Concurrency.MainActor(unsafe) public func mediaSelectionStyle(_ style: BAKFramework.MediaSelectionStyle) -> BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>
  @_Concurrency.MainActor(unsafe) public func mediaSelectionLimit(_ limit: Swift.Int) -> BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor(unsafe) public func applyFilter(_ filterClosure: @escaping BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>.FilterClosure) -> BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor(unsafe) public func applyFilter(_ filterClosure: @escaping BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>.MassFilterClosure) -> BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>
  #endif
  @_Concurrency.MainActor(unsafe) public func didPressCancelCamera(_ didPressCancelCamera: @escaping () -> ()) -> BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>
  @_Concurrency.MainActor(unsafe) public func orientationHandler(_ orientationHandler: @escaping BAKFramework.MediaPickerOrientationHandler) -> BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>
  @_Concurrency.MainActor(unsafe) public func currentFullscreenMedia(_ currentFullscreenMedia: SwiftUI.Binding<BAKFramework.Media?>) -> BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>
  @_Concurrency.MainActor(unsafe) public func albums(_ albums: SwiftUI.Binding<[BAKFramework.Album]>) -> BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>
  @_Concurrency.MainActor(unsafe) public func pickerMode(_ mode: SwiftUI.Binding<BAKFramework.MediaPickerMode>) -> BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>
}
extension BAKFramework.MediaPicker where AlbumSelectionContent == SwiftUI.EmptyView, CameraSelectionContent == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(isPresented: SwiftUI.Binding<Swift.Bool>, onChange: @escaping BAKFramework.MediaPickerCompletionClosure)
}
extension BAKFramework.MediaPicker where AlbumSelectionContent == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(isPresented: SwiftUI.Binding<Swift.Bool>, onChange: @escaping BAKFramework.MediaPickerCompletionClosure, cameraSelectionBuilder: @escaping BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>.CameraSelectionClosure)
}
extension BAKFramework.MediaPicker where CameraSelectionContent == SwiftUI.EmptyView {
  @_Concurrency.MainActor(unsafe) public init(isPresented: SwiftUI.Binding<Swift.Bool>, onChange: @escaping BAKFramework.MediaPickerCompletionClosure, albumSelectionBuilder: @escaping BAKFramework.MediaPicker<AlbumSelectionContent, CameraSelectionContent>.AlbumSelectionClosure)
}
public struct Album : Swift.Identifiable {
  public let id: Swift.String
  public let title: Swift.String?
  public let preview: Photos.PHAsset?
  public typealias ID = Swift.String
}
@_Concurrency.MainActor(unsafe) public struct AlbumSelectionView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12BAKFramework18AlbumSelectionViewV4bodyQrvp", 0) __
}
public struct ModeSwitcher : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12BAKFramework12ModeSwitcherV4bodyQrvp", 0) __
}
public struct MediasGrid<Data, Camera, Content, LoadingCell> : SwiftUI.View where Data : Swift.RandomAccessCollection, Camera : SwiftUI.View, Content : SwiftUI.View, LoadingCell : SwiftUI.View, Data.Element : Swift.Identifiable {
  public let data: Data
  public let camera: () -> Camera
  public let content: (Data.Element) -> Content
  public let loadingCell: () -> LoadingCell
  public init(_ data: Data, @SwiftUI.ViewBuilder camera: @escaping () -> Camera, @SwiftUI.ViewBuilder content: @escaping (Data.Element) -> Content, @SwiftUI.ViewBuilder loadingCell: @escaping () -> LoadingCell)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12BAKFramework10MediasGridV4bodyQrvp", 0) __<Data, Camera, Content, LoadingCell>
}
public enum MediaPickerMode : Swift.Equatable {
  case photos
  case albums
  case album(BAKFramework.Album)
  case camera
  case cameraSelection
  public static func == (lhs: BAKFramework.MediaPickerMode, rhs: BAKFramework.MediaPickerMode) -> Swift.Bool
}
@_Concurrency.MainActor(unsafe) public struct CameraSelectionView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12BAKFramework19CameraSelectionViewV4bodyQrvp", 0) __
}
extension Swift.Bool {
  public static func random() -> Swift.Bool
}
extension Swift.Int {
  public static func random(_ lower: Swift.Int = 0, _ upper: Swift.Int = 100) -> Swift.Int
}
extension Swift.Int32 {
  public static func random(_ lower: Swift.Int = 0, _ upper: Swift.Int = 100) -> Swift.Int32
}
extension Swift.String {
  public static func random(ofLength length: Swift.Int) -> Swift.String
  public static func random(minimumLength min: Swift.Int, maximumLength max: Swift.Int) -> Swift.String
  public static func random(withCharactersInString string: Swift.String, ofLength length: Swift.Int) -> Swift.String
  public static func random(withCharactersInString string: Swift.String, minimumLength min: Swift.Int, maximumLength max: Swift.Int) -> Swift.String
}
extension Swift.Double {
  public static func random(_ lower: Swift.Double = 0, _ upper: Swift.Double = 100) -> Swift.Double
}
extension Swift.Float {
  public static func random(_ lower: Swift.Float = 0, _ upper: Swift.Float = 100) -> Swift.Float
}
extension CoreFoundation.CGFloat {
  public static func random(_ lower: CoreFoundation.CGFloat = 0, _ upper: CoreFoundation.CGFloat = 1) -> CoreFoundation.CGFloat
}
extension Foundation.Date {
  public static func randomWithinDaysBeforeToday(_ days: Swift.Int) -> Foundation.Date
  public static func random() -> Foundation.Date
  public static func random(between initial: Foundation.Date, and final: Foundation.Date) -> Foundation.Date
}
extension UIKit.UIColor {
  public static func random(_ randomAlpha: Swift.Bool = false) -> UIKit.UIColor
}
extension Foundation.URL {
  public static func random() -> Foundation.URL
}
public struct Randoms {
  public static func randomBool() -> Swift.Bool
  public static func randomInt(_ range: Swift.Range<Swift.Int>) -> Swift.Int
  public static func randomInt(_ lower: Swift.Int = 0, _ upper: Swift.Int = 100) -> Swift.Int
  public static func randomInt32(_ range: Swift.Range<Swift.Int32>) -> Swift.Int32
  public static func randomInt32(_ lower: Swift.Int = 0, _ upper: Swift.Int = 100) -> Swift.Int32
  public static func randomString(ofLength length: Swift.Int) -> Swift.String
  public static func randomString(minimumLength min: Swift.Int, maximumLength max: Swift.Int) -> Swift.String
  public static func randomString(withCharactersInString string: Swift.String, ofLength length: Swift.Int) -> Swift.String
  public static func randomString(withCharactersInString string: Swift.String, minimumLength min: Swift.Int, maximumLength max: Swift.Int) -> Swift.String
  public static func randomPercentageisOver(_ percentage: Swift.Int) -> Swift.Bool
  public static func randomDouble(_ lower: Swift.Double = 0, _ upper: Swift.Double = 100) -> Swift.Double
  public static func randomFloat(_ lower: Swift.Float = 0, _ upper: Swift.Float = 100) -> Swift.Float
  public static func randomCGFloat(_ lower: CoreFoundation.CGFloat = 0, _ upper: CoreFoundation.CGFloat = 1) -> CoreFoundation.CGFloat
  public static func randomDateWithinDaysBeforeToday(_ days: Swift.Int) -> Foundation.Date
  public static func randomDate() -> Foundation.Date
  public static func randomColor(_ randomAlpha: Swift.Bool = false) -> UIKit.UIColor
  public static func randomNSURL() -> Foundation.URL
  public static func randomFakeName() -> Swift.String
  public static func randomFakeFirstName() -> Swift.String
  public static func randomFakeLastName() -> Swift.String
  public static func randomFakeGender() -> Swift.String
  public static func randomFakeConversation() -> Swift.String
  public static func randomFakeTitle() -> Swift.String
  public static func randomFakeTag() -> Swift.String
  public static func randomFakeNameAndEnglishHonorific() -> Swift.String
  public static func randomFakeCity() -> Swift.String
  public static func randomCurrency() -> Swift.String
  public enum GravatarStyle : Swift.String {
    case Standard
    case MM
    case Identicon
    case MonsterID
    case Wavatar
    case Retro
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public static func createGravatar(_ style: BAKFramework.Randoms.GravatarStyle = .Standard, size: Swift.Int = 80, completion: ((_ image: UIKit.UIImage?, _ error: Swift.Error?) -> Swift.Void)?)
  public static func randomGravatar(_ size: Swift.Int = 80, completion: ((_ image: UIKit.UIImage?, _ error: Swift.Error?) -> Swift.Void)?)
}
public typealias MediaPickerCompletionClosure = ([BAKFramework.Media]) -> Swift.Void
public typealias MediaPickerOrientationHandler = (BAKFramework.ShouldLock) -> Swift.Void
public typealias SimpleClosure = () -> ()
public enum ShouldLock {
  case lock, unlock
  public static func == (a: BAKFramework.ShouldLock, b: BAKFramework.ShouldLock) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension BAKFramework.MediaSelectionStyle : Swift.Equatable {}
extension BAKFramework.MediaSelectionStyle : Swift.Hashable {}
extension BAKFramework.MediaSelectionType : Swift.Equatable {}
extension BAKFramework.MediaSelectionType : Swift.Hashable {}
extension BAKFramework.MediaType : Swift.Equatable {}
extension BAKFramework.MediaType : Swift.Hashable {}
extension BAKFramework.Randoms.GravatarStyle : Swift.Equatable {}
extension BAKFramework.Randoms.GravatarStyle : Swift.Hashable {}
extension BAKFramework.Randoms.GravatarStyle : Swift.RawRepresentable {}
extension BAKFramework.ShouldLock : Swift.Equatable {}
extension BAKFramework.ShouldLock : Swift.Hashable {}
