// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BAKFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AdSupport
import AppTrackingTransparency
import AppsFlyerLib
import FBSDKCoreKit
import FacebookCore

import Foundation
import MediaPicker
import OneSignal
import Photos
import SBPAsyncImage
import Swift
import SwiftUI
import SystemConfiguration
import TikTokOpenSDK
import UIKit
import _Concurrency
import _PhotosUI_SwiftUI
import _StringProcessing

@_inheritsConvenienceInitializers @objc(BAKService) final public class BAKService : ObjectiveC.NSObject {
  public enum FirstRunMode {
    case empty
    case importByQR(Swift.String, Swift.String)
    case leaderBoard(_: Swift.String = "", _: (() -> Swift.Void)? = nil)
  }
  final public var configuraionSource: BAKFramework.BAKService.LAConfiguration!
  final public var additionalKeys: [Swift.String : Swift.String]
  @objc public static var shared: BAKFramework.BAKService
  final public func showInitializationView(window: inout UIKit.UIWindow?)
  @objc final public func setupUnityAnalytics(argc: Swift.Int32, argv: Swift.UnsafeMutablePointer<Swift.UnsafeMutablePointer<Swift.CChar>?>, appOrientation: UIKit.UIInterfaceOrientationMask = .all, main: @escaping (() -> Swift.Void))
  final public func setupAnalytics(appOrientation: UIKit.UIInterfaceOrientationMask = .all, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?, window: inout UIKit.UIWindow?, main: (() -> Swift.Void)? = nil, back: (() -> Swift.Void)? = nil)
  final public func setupUIAnalytics(appOrientation: UIKit.UIInterfaceOrientationMask = .all, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?, window: inout UIKit.UIWindow?, main: (() -> (SwiftUI.View)?)? = nil, back: (() -> Swift.Void)? = nil)
  public static var orientationLock: UIKit.UIInterfaceOrientationMask {
    get
    set
  }
  public struct LAConfiguration : Swift.Codable {
    public let appleAppID: Swift.String
    public let appsFlyer: Swift.String
    public let oneSignal: Swift.String
    public let tikTok: Swift.String
    public let facebookid: Swift.String
    public let facebookkey: Swift.String
    public let email: Swift.String?
    public let leaderboard: Swift.Bool
    public let privacyUrl: Swift.String?
    public let config: Swift.Bool?
    public let termUrl: Swift.String?
    public let back: Swift.Bool?
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  @objc override dynamic public init()
  @objc deinit
}
extension BAKFramework.BAKService : AppsFlyerLibDelegate {
  @objc final public func onConversionDataSuccess(_ conversionInfo: [Swift.AnyHashable : Any])
  @objc final public func onConversionDataFail(_ error: Swift.Error)
  @objc final public func onAppOpenAttribution(_ attributionData: [Swift.AnyHashable : Any])
  @objc final public func onAppOpenAttributionFailure(_ error: Swift.Error)
}
@_Concurrency.MainActor(unsafe) public struct LeaderBoard_Previews : SwiftUI.PreviewProvider {
  @_Concurrency.MainActor(unsafe) public static var previews: some SwiftUI.View {
    get
  }
  public typealias Previews = @_opaqueReturnTypeOf("$s12BAKFramework20LeaderBoard_PreviewsV8previewsQrvpZ", 0) __
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PVC : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) public func showSwiftUI(view: some View)
  @_Concurrency.MainActor(unsafe) public func hideSwiftUI()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Reachability {
  @objc deinit
}
extension Swift.Bool {
  public static func random() -> Swift.Bool
}
extension Swift.Int {
  public static func random(_ lower: Swift.Int = 0, _ upper: Swift.Int = 100) -> Swift.Int
}
extension Swift.Int32 {
  public static func random(_ lower: Swift.Int = 0, _ upper: Swift.Int = 100) -> Swift.Int32
}
extension Swift.String {
  public static func random(ofLength length: Swift.Int) -> Swift.String
  public static func random(minimumLength min: Swift.Int, maximumLength max: Swift.Int) -> Swift.String
  public static func random(withCharactersInString string: Swift.String, ofLength length: Swift.Int) -> Swift.String
  public static func random(withCharactersInString string: Swift.String, minimumLength min: Swift.Int, maximumLength max: Swift.Int) -> Swift.String
}
extension Swift.Double {
  public static func random(_ lower: Swift.Double = 0, _ upper: Swift.Double = 100) -> Swift.Double
}
extension Swift.Float {
  public static func random(_ lower: Swift.Float = 0, _ upper: Swift.Float = 100) -> Swift.Float
}
extension CoreFoundation.CGFloat {
  public static func random(_ lower: CoreFoundation.CGFloat = 0, _ upper: CoreFoundation.CGFloat = 1) -> CoreFoundation.CGFloat
}
extension Foundation.Date {
  public static func randomWithinDaysBeforeToday(_ days: Swift.Int) -> Foundation.Date
  public static func random() -> Foundation.Date
  public static func random(between initial: Foundation.Date, and final: Foundation.Date) -> Foundation.Date
}
extension UIKit.UIColor {
  public static func random(_ randomAlpha: Swift.Bool = false) -> UIKit.UIColor
}
extension Foundation.URL {
  public static func random() -> Foundation.URL
}
public struct Randoms {
  public static func randomBool() -> Swift.Bool
  public static func randomInt(_ range: Swift.Range<Swift.Int>) -> Swift.Int
  public static func randomInt(_ lower: Swift.Int = 0, _ upper: Swift.Int = 100) -> Swift.Int
  public static func randomInt32(_ range: Swift.Range<Swift.Int32>) -> Swift.Int32
  public static func randomInt32(_ lower: Swift.Int = 0, _ upper: Swift.Int = 100) -> Swift.Int32
  public static func randomString(ofLength length: Swift.Int) -> Swift.String
  public static func randomString(minimumLength min: Swift.Int, maximumLength max: Swift.Int) -> Swift.String
  public static func randomString(withCharactersInString string: Swift.String, ofLength length: Swift.Int) -> Swift.String
  public static func randomString(withCharactersInString string: Swift.String, minimumLength min: Swift.Int, maximumLength max: Swift.Int) -> Swift.String
  public static func randomPercentageisOver(_ percentage: Swift.Int) -> Swift.Bool
  public static func randomDouble(_ lower: Swift.Double = 0, _ upper: Swift.Double = 100) -> Swift.Double
  public static func randomFloat(_ lower: Swift.Float = 0, _ upper: Swift.Float = 100) -> Swift.Float
  public static func randomCGFloat(_ lower: CoreFoundation.CGFloat = 0, _ upper: CoreFoundation.CGFloat = 1) -> CoreFoundation.CGFloat
  public static func randomDateWithinDaysBeforeToday(_ days: Swift.Int) -> Foundation.Date
  public static func randomDate() -> Foundation.Date
  public static func randomColor(_ randomAlpha: Swift.Bool = false) -> UIKit.UIColor
  public static func randomNSURL() -> Foundation.URL
  public static func randomFakeName() -> Swift.String
  public static func randomFakeFirstName() -> Swift.String
  public static func randomFakeLastName() -> Swift.String
  public static func randomFakeGender() -> Swift.String
  public static func randomFakeConversation() -> Swift.String
  public static func randomFakeTitle() -> Swift.String
  public static func randomFakeTag() -> Swift.String
  public static func randomFakeNameAndEnglishHonorific() -> Swift.String
  public static func randomFakeCity() -> Swift.String
  public static func randomCurrency() -> Swift.String
  public enum GravatarStyle : Swift.String {
    case Standard
    case MM
    case Identicon
    case MonsterID
    case Wavatar
    case Retro
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public static func createGravatar(_ style: BAKFramework.Randoms.GravatarStyle = .Standard, size: Swift.Int = 80, completion: ((_ image: UIKit.UIImage?, _ error: Swift.Error?) -> Swift.Void)?)
  public static func randomGravatar(_ size: Swift.Int = 80, completion: ((_ image: UIKit.UIImage?, _ error: Swift.Error?) -> Swift.Void)?)
}
extension BAKFramework.Randoms.GravatarStyle : Swift.Equatable {}
extension BAKFramework.Randoms.GravatarStyle : Swift.Hashable {}
extension BAKFramework.Randoms.GravatarStyle : Swift.RawRepresentable {}
